1592239521485:lister
1592239530053:(ns sitegen_reagent.util)
1592239531554:lister
1592239538387:(ns sitegen_reagent.util)
1592239540691:lister
1592239541178:nav
1592239549877:(ns sitegen_reagent.util :refer [lister])
1592239833993:(require sitegen_reagent.util)
1592239838858:(require sitegen_reagent.util :as sg)
1592239857723:(require [sitegen_reagent.util :as sg])
1592239871395:(require `[sitegen_reagent.util :as sg])
1592239880267:(require '[sitegen_reagent.util :as sg])
1592239885546:sg/lister
1592239891770:lister
1592239897924:(sg/lister)
1592239900282:sg
1592239915308:(require '[sitegen_reagent.util :as sg] :reload)
1592239917058:sg
1592242113978:(ns sitegen-reagent.app)
1592242115298:lister
1592242122044:(ns sitegen-reagent.app :reload)
1592242127547:lister
1592242140571:@app-state
1592242149695:(@app-state)
1592243611548:(ns sitegen-reagent.app)
1592243616050:@app-state
1592245602788:'(:a :b :c)
1592245609122:(list 5)
1592245613373:(list a b c)
1592245621267:(list :a :b :c)
1592245641883:'(:a :b :c)
1592245648267:(list :a :b :c)
1592245893110:(conj '(2 3 4) 1)
1592245902956:(conj (2 3 4) 1)
1592245911605:(conj list(2 3 4) 1)
1592245921788:(conj (list 2 3 4) 1)
1592246040142:[:a :b :c]
1592246057010:(= [:a :b :c) (list :a :b :c))
1592246075032:(= [:a :b :c] (list :a :b :c))
1592246097186:(= [:a :b :c] (list :a :b :23))
1592246292773:(vec '(:a :b :c)) (vector :a :b :c))
1592246299136:(set '(:a :a :b :c :c :c :c :d :d))
1592246384741:(clojure.set/union #{:a :b :c} #{:b :c :d})
1592246401468:(clojure.set/union {:a :b :c} {:b :c :d})
1592246416493:(set '(:a :a :b :c :c :c :c :d :d))
1592246419580:(clojure.set/union {:a :b :c} {:b :c :d})
1592246421203:(set '(:a :a :b :c :c :c :c :d :d))
1592246424675:(clojure.set/union #{:a :b :c} #{:b :c :d})
1592246443220:(= (set '(:a :a :b :c :c :c :c :d :d)) #{:c :b :a :d})
1592247126810:(partial + 5)
1592247131677:(partial + 5) 3
1592247135538:((partial + 5) 3)
1592247151149:(#(+ % 5))
1592247155163:(#(+ % 5)3)
1592247281706:(#([:div %]) "text")
1592247542407:(str "Hello," 4 "!")
1592247555326:(#(str "Hello," % "!") 2)
1592248249722:(map #(+ % 5) '(1 2 3))
1592248330928:(type 4)
1592248341553:(type (2 3 4))
1592248348716:(type '(2 3 4))
1592248362283:(2 3 4)
1592248367906:list(2 3 4)
1592248373732:(list (2 3 4))
1592248378882:(list 2 3 4)
1592248444751:(@app-state)
1592248453028:(ns sitegen-reagent.app :reload)
1592248466308:(ns sitegen-reagent.app)
1592248474446:(@app-state)
1592248483181:(ns sitegen-reagent.app :reload)
1592248501582:(ns sitegen-reagent.app :refer [@app-state])
1592248614570:(map #([:div %]) '(1 2 3))
1592248621044:(map #([:div %] 3) '(1 2 3))
1592248630067:(map #([:div %] _) '(1 2 3))
1592248633931:(map #([:div %] _#) '(1 2 3))
1592248640630:(map #([:div %]) (1 2 3))
1592248669261:(map #(fn[] [:div %]) '(1 2 3))
1592248687661:(map #(fn[%] [:div %]) '(1 2 3))
1592248695338:(map (fn[%] [:div %]) '(1 2 3))
1592248804606:(for [ str (map (identity) '(1 2 3)) [:div str])
1592248820545:(for [ str (map (identity) '(1 2 3))] [:div str])
1592248831563:(for [ str (map identity '(1 2 3))] [:div str])
1592248836938:(map (fn[%] [:div %]) '(1 2 3))
1592248993090:(filter #(> % 5) '(3 4 5 6 7))
1592249155564:(def x #([:div] %))
1592249156803:x
1592249159523:x 5
1592249167485:(x 5)
1592249174542:(x [5])
1592249182217:(def x #(identity [:div] %))
1592249193577:(def x #(identity ([:div] %)))
1592249196668:(x 5)
1592249294309:(def x #([:div %]))
1592249295639:x
1592249298518:(x 5)
1592249362659:(def x #(:div %))
1592249365450:(x 5)
1592249371610:(x 5 3)
1592249374643:(x 5)
1592249397867:(map (fn[x] [:div x]) '(1 2 3))
1592249665415:(ns sitegen-reagent.app)
1592249669831:(ns sitegen-reagent.core)
1592249813999:(ns sitegen-reagent/core)
1592249819292:(ns sitegen-reagent.core)
1592250070831:(let child get-in @app-state [:json :children] )
1592250075682:child
1592250081140:(let ch 44)
1592250082835:ch
1592251750961:(dec 10)
1592251768178:#(nth (1 2 3) 2)
1592251778326:#(nth % 2)
1592251788511:(#(nth % 2) (1 2 3))
1592251855106:(#(nth %)(1 2 3))
1592251859147:(#(nth %)(1 2 3) 2)
1592251883485:(#(nth % (dec (count %)))[1 2 3])
1592251898124:(#(nth %)[2 3 4) 2)
1592251907821:(#(nth 2)[2 3 4))
1592251913618:(#(nth %)[2 3 4) 2)
1592251934780:(#(nth % (dec (count %)))[1 2 3])
1592251965354:(#(nth % 2 [2 3 4]))
1592251988046:(#(nth % 2 )[2 3 4])
1592252098090:(#(nth (reverse %) 2 )[2 3 4])
1592252113427:(#(nth (reverse %) (dec (count %)) )[2 3 4])
1592252493297:(#(nth (reverse %) (dec (dec ( count %)))) [ 1 2 3])
1592253277055:(drop 3 [1 2 3 4 5 56 6 ])
1592254371936:(map (constantly 1) [1 2 3 4])
1592254812801:#(reduce (conj %) )
1592254819258:#(reduce (conj %) [1 2 3 4] )
1592254840929:#(reduce conj [1 2 3 4] )
1592254846865:(reduce conj [1 2 3 4] )
1592255042914:(reduce conj [] [1 2 3 4] )
1592255184128:(reduce concat [] [1 2 3 4] )
1592255218523:(reduce concat '() [1 2 3 4] )
1592255223410:(reduce conj '() [1 2 3 4] )
1592255242738:(reduce conj [] [1 2 3 4] )
1592255252803:(reduce conj '() [1 2 3 4] )
1592255293427:(reduce conj #{} [1 2 3 4] )
1592255342861:(reduce conj '[] [1 2 3 4] )
1592255477726:reduce +
1592255481031:(reduce +)
1592255490809:(reduce conj ())
1592255495248:(reduce conj ()) [1 2 3]
1592255507728:(reduce conj ()) [:a 1 :b 2]
1592255777493:(#(filter (not= (mod % 2) 0)) [ 1 2 3 4])
1592255790641:(filter (not= (mod % 2) 0)) [ 1 2 3 4])
1592255860786:(mod 2 4)
1592255865697:(mod 4 2)
1592256021876:(filter (not= (mod % 2) 0)) [ 1 2 3 4])
1592256327347:(#(filter (mod % 2) [2 3 4 5]))
1592256350609:(#(filter (mod % 2)) [2 3 4 5])
1592256381937:(filter (mod % 2) [2 3 4 5])
1592256404202:(filter #(mod % 2) [2 3 4 5])
1592256427107:(filter #(not= (mod % 2) 0) [2 3 4 5])
1592256763505:reduce conj [ 1 1 ]
1592257057141:(conj [1] [2])
1592257067740:(conj [1] 1)
1592257070380:(conj [1] 1 2)
1592257253364:(->> (range)\n            (map #(* % %))\n            (filter even?))
1592302209793:(iterate inc 5)
1592312395905:(def nodeparse [node] (contains? :children node))
1592312402554:(defn nodeparse [node] (contains? :children node))
1592312411778:(nodparse {:a 4})
1592312417880:(nodeparse {:a 4})
1592312422449:(nodeparse {:children 4})
1592312430729:(nodeparse {:children {:a 5}})
1592312688702:(defn nodeparse [node] (nil? node :children))
1592312700733:(nil? {:children {:a 5}})
1592312705230:(nil? {:children {:a 5}} :children)
1592312734774:(nil? ({:children {:a 5}} :children))
1592312737846:(nil? ({:children {:a 5}} :childr))
1592313491055:(def m {:string "Haalooo" :children [{:string "child1"}]})
1592313493571:m
1592313540845:(defn parsenode [m]\n  (if (nil? (m :children))\n    [:p (:string m)]\n    [:details [:summary (:string m)] (map (:children m) parsenode)]\n  ))
1592313547377:(parsenode m)
1592313570218:(m :children)
1592313583234:(:children m)
1592313605766:(if (nil? (m :children))\n           #_=>     [:p (:string m)] [])
1592313623871:(nil? (m :children))
1592313657485:(nil? (m :childrs))
1592313752337:(if (nil? (m :children)) [:p (:string m)] [:details [:summary (:string m)])
1592313754960:(if (nil? (m :children)) [:p (:string m)] [:details [:summary (:string m)]))
1592313762745:(if (nil? (m :children)) [:p (:string m)] [:details [:summary (:string m)]]))
1592313766439:(if (nil? (m :children)) [:p (:string m)] [:details [:summary (:string m)]])
1592313874437:(defn parsenode [m]\n  (if (nil? (m :children))\n    [:p (:string m)]\n    [:details [:summary (:string m)] (map parsenode (:children m))]\n  ))
1592313887267:(parsenode m)
1592314019410:(nil? (:child {:a 5}))
1592314320914:(+ 4 "rem")
1592314332929:(conj 4 "rem")
1592314365877:(+ (str 1) "rem")
1592314375947:((str 1) "rem")
1592314383643:(str 1) "rem"
1592314411826:(str 1 "rem")
1592314831110:(defn parse-n [m] #(parsenode m 0))
1592314861407:(defn sum [n] #(+ n 3))
1592314866110:(sum 3)
1592314869669:(sum 3) 4
1592314875702:(sum 3 3)
1592314891480:(defn sum [n] (+ n 3))
1592314895502:(sum 3)
1592315329742:(map sum 4 [1 2 3 4])
1592315385171:(map #(sum %2 %) [1 2 3 4])
1592315397209:(map #(sum %) [1 2 3 4])
1592315436109:(map (fn[](sum 1)) [1 2 3 4])
1592315449707:(map (+ 1) [1 2 3 4])
1592315454140:(map (+ 1 2) [1 2 3 4])
1592315495938:[1 2 3 4]
1592315504935:(map identity [1 2 3 4])
1592315513733:(map + [1 2 3 4])
1592315526423:(map (fn[] 5) [1 2 3 4])
1592315585182:(map #(fn[% %2] (+ % %2)) [1 2 3 4])
1592315589999:(map #(fn[% %2] (+ % %2)) [1 2 3 4] 3)
1592315592320:(map #(fn[% %2] (+ % %2)) [1 2 3 4] 3 6)
1592315604560:(map #(fn[% %2] (+ % %2)) 3 6  [1 2 3 4])
1592315648027:(#(+ % %2) 3 6)
1592315704461:(map (#(+ % %2) 3 6)  [1 2 3 4])
1592315730339:(map (#(+ % %2) 3)  [1 2 3 4])
1592315739387:(map (#(+ % %2) 3  [1 2 3 4]))
1592315858873:(map (#(+ % 3)  [1 2 3 4]))
1592315903191:(defn aa [x] 2*x)
1592315908123:(defn aa [x] [2*x])
1592315930529:(defn aa [x] (* 2 x))
1592315932782:aa 3
1592315943120:(aa 3)
1592315964019:(defn ab [x y] (* 2 [x y]))
1592315988828:(defn ab [x y] [(* 2 x) (* 2 y)]))
1592315999452:(defn ab [x y] [(* 2 x) (* 2 y)])
1592316002704:ab 2 3
1592316007410:(ab 2 3)
1592316022313:#(ab % 3)
1592316028970:(#(ab % 3) 2)
1592316032586:(#(ab % 3) 5)
1592316040099:(#(ab %2 %) 5)
1592316043291:(#(ab %2 %) 5 10)
1592316080958:(map (#(ab % %2) 3)  [1 2 3 4])
1592316192524:(map (partial ab 2) [1 3 5 7 9])
1592322140433:(defn split-by-whitespace [s]\n	(clojure.string/split s #"\\s+"))
1592322151710:split-by-whitespace
1592322167594:(split-by-whitespace "asdas as ww aa S")
