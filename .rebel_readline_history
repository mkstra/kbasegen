1592239521485:lister
1592239530053:(ns sitegen_reagent.util)
1592239531554:lister
1592239538387:(ns sitegen_reagent.util)
1592239540691:lister
1592239541178:nav
1592239549877:(ns sitegen_reagent.util :refer [lister])
1592239833993:(require sitegen_reagent.util)
1592239838858:(require sitegen_reagent.util :as sg)
1592239857723:(require [sitegen_reagent.util :as sg])
1592239871395:(require `[sitegen_reagent.util :as sg])
1592239880267:(require '[sitegen_reagent.util :as sg])
1592239885546:sg/lister
1592239891770:lister
1592239897924:(sg/lister)
1592239900282:sg
1592239915308:(require '[sitegen_reagent.util :as sg] :reload)
1592239917058:sg
1592242113978:(ns sitegen-reagent.app)
1592242115298:lister
1592242122044:(ns sitegen-reagent.app :reload)
1592242127547:lister
1592242140571:@app-state
1592242149695:(@app-state)
1592243611548:(ns sitegen-reagent.app)
1592243616050:@app-state
1592245602788:'(:a :b :c)
1592245609122:(list 5)
1592245613373:(list a b c)
1592245621267:(list :a :b :c)
1592245641883:'(:a :b :c)
1592245648267:(list :a :b :c)
1592245893110:(conj '(2 3 4) 1)
1592245902956:(conj (2 3 4) 1)
1592245911605:(conj list(2 3 4) 1)
1592245921788:(conj (list 2 3 4) 1)
1592246040142:[:a :b :c]
1592246057010:(= [:a :b :c) (list :a :b :c))
1592246075032:(= [:a :b :c] (list :a :b :c))
1592246097186:(= [:a :b :c] (list :a :b :23))
1592246292773:(vec '(:a :b :c)) (vector :a :b :c))
1592246299136:(set '(:a :a :b :c :c :c :c :d :d))
1592246384741:(clojure.set/union #{:a :b :c} #{:b :c :d})
1592246401468:(clojure.set/union {:a :b :c} {:b :c :d})
1592246416493:(set '(:a :a :b :c :c :c :c :d :d))
1592246419580:(clojure.set/union {:a :b :c} {:b :c :d})
1592246421203:(set '(:a :a :b :c :c :c :c :d :d))
1592246424675:(clojure.set/union #{:a :b :c} #{:b :c :d})
1592246443220:(= (set '(:a :a :b :c :c :c :c :d :d)) #{:c :b :a :d})
1592247126810:(partial + 5)
1592247131677:(partial + 5) 3
1592247135538:((partial + 5) 3)
1592247151149:(#(+ % 5))
1592247155163:(#(+ % 5)3)
1592247281706:(#([:div %]) "text")
1592247542407:(str "Hello," 4 "!")
1592247555326:(#(str "Hello," % "!") 2)
1592248249722:(map #(+ % 5) '(1 2 3))
1592248330928:(type 4)
1592248341553:(type (2 3 4))
1592248348716:(type '(2 3 4))
1592248362283:(2 3 4)
1592248367906:list(2 3 4)
1592248373732:(list (2 3 4))
1592248378882:(list 2 3 4)
1592248444751:(@app-state)
1592248453028:(ns sitegen-reagent.app :reload)
1592248466308:(ns sitegen-reagent.app)
1592248474446:(@app-state)
1592248483181:(ns sitegen-reagent.app :reload)
1592248501582:(ns sitegen-reagent.app :refer [@app-state])
1592248614570:(map #([:div %]) '(1 2 3))
1592248621044:(map #([:div %] 3) '(1 2 3))
1592248630067:(map #([:div %] _) '(1 2 3))
1592248633931:(map #([:div %] _#) '(1 2 3))
1592248640630:(map #([:div %]) (1 2 3))
1592248669261:(map #(fn[] [:div %]) '(1 2 3))
1592248687661:(map #(fn[%] [:div %]) '(1 2 3))
1592248695338:(map (fn[%] [:div %]) '(1 2 3))
1592248804606:(for [ str (map (identity) '(1 2 3)) [:div str])
1592248820545:(for [ str (map (identity) '(1 2 3))] [:div str])
1592248831563:(for [ str (map identity '(1 2 3))] [:div str])
1592248836938:(map (fn[%] [:div %]) '(1 2 3))
1592248993090:(filter #(> % 5) '(3 4 5 6 7))
1592249155564:(def x #([:div] %))
1592249156803:x
1592249159523:x 5
1592249167485:(x 5)
1592249174542:(x [5])
1592249182217:(def x #(identity [:div] %))
1592249193577:(def x #(identity ([:div] %)))
1592249196668:(x 5)
1592249294309:(def x #([:div %]))
1592249295639:x
1592249298518:(x 5)
1592249362659:(def x #(:div %))
1592249365450:(x 5)
1592249371610:(x 5 3)
1592249374643:(x 5)
1592249397867:(map (fn[x] [:div x]) '(1 2 3))
1592249665415:(ns sitegen-reagent.app)
1592249669831:(ns sitegen-reagent.core)
1592249813999:(ns sitegen-reagent/core)
1592249819292:(ns sitegen-reagent.core)
1592250070831:(let child get-in @app-state [:json :children] )
1592250075682:child
1592250081140:(let ch 44)
1592250082835:ch
1592251750961:(dec 10)
1592251768178:#(nth (1 2 3) 2)
1592251778326:#(nth % 2)
1592251788511:(#(nth % 2) (1 2 3))
1592251855106:(#(nth %)(1 2 3))
1592251859147:(#(nth %)(1 2 3) 2)
1592251883485:(#(nth % (dec (count %)))[1 2 3])
1592251898124:(#(nth %)[2 3 4) 2)
1592251907821:(#(nth 2)[2 3 4))
1592251913618:(#(nth %)[2 3 4) 2)
1592251934780:(#(nth % (dec (count %)))[1 2 3])
1592251965354:(#(nth % 2 [2 3 4]))
1592251988046:(#(nth % 2 )[2 3 4])
1592252098090:(#(nth (reverse %) 2 )[2 3 4])
1592252113427:(#(nth (reverse %) (dec (count %)) )[2 3 4])
1592252493297:(#(nth (reverse %) (dec (dec ( count %)))) [ 1 2 3])
1592253277055:(drop 3 [1 2 3 4 5 56 6 ])
1592254371936:(map (constantly 1) [1 2 3 4])
1592254812801:#(reduce (conj %) )
1592254819258:#(reduce (conj %) [1 2 3 4] )
1592254840929:#(reduce conj [1 2 3 4] )
1592254846865:(reduce conj [1 2 3 4] )
1592255042914:(reduce conj [] [1 2 3 4] )
1592255184128:(reduce concat [] [1 2 3 4] )
1592255218523:(reduce concat '() [1 2 3 4] )
1592255223410:(reduce conj '() [1 2 3 4] )
1592255242738:(reduce conj [] [1 2 3 4] )
1592255252803:(reduce conj '() [1 2 3 4] )
1592255293427:(reduce conj #{} [1 2 3 4] )
1592255342861:(reduce conj '[] [1 2 3 4] )
1592255477726:reduce +
1592255481031:(reduce +)
1592255490809:(reduce conj ())
1592255495248:(reduce conj ()) [1 2 3]
1592255507728:(reduce conj ()) [:a 1 :b 2]
1592255777493:(#(filter (not= (mod % 2) 0)) [ 1 2 3 4])
1592255790641:(filter (not= (mod % 2) 0)) [ 1 2 3 4])
1592255860786:(mod 2 4)
1592255865697:(mod 4 2)
1592256021876:(filter (not= (mod % 2) 0)) [ 1 2 3 4])
1592256327347:(#(filter (mod % 2) [2 3 4 5]))
1592256350609:(#(filter (mod % 2)) [2 3 4 5])
1592256381937:(filter (mod % 2) [2 3 4 5])
1592256404202:(filter #(mod % 2) [2 3 4 5])
1592256427107:(filter #(not= (mod % 2) 0) [2 3 4 5])
1592256763505:reduce conj [ 1 1 ]
1592257057141:(conj [1] [2])
1592257067740:(conj [1] 1)
1592257070380:(conj [1] 1 2)
1592257253364:(->> (range)\n            (map #(* % %))\n            (filter even?))
1592302209793:(iterate inc 5)
1592312395905:(def nodeparse [node] (contains? :children node))
1592312402554:(defn nodeparse [node] (contains? :children node))
1592312411778:(nodparse {:a 4})
1592312417880:(nodeparse {:a 4})
1592312422449:(nodeparse {:children 4})
1592312430729:(nodeparse {:children {:a 5}})
1592312688702:(defn nodeparse [node] (nil? node :children))
1592312700733:(nil? {:children {:a 5}})
1592312705230:(nil? {:children {:a 5}} :children)
1592312734774:(nil? ({:children {:a 5}} :children))
1592312737846:(nil? ({:children {:a 5}} :childr))
1592313491055:(def m {:string "Haalooo" :children [{:string "child1"}]})
1592313493571:m
1592313540845:(defn parsenode [m]\n  (if (nil? (m :children))\n    [:p (:string m)]\n    [:details [:summary (:string m)] (map (:children m) parsenode)]\n  ))
1592313547377:(parsenode m)
1592313570218:(m :children)
1592313583234:(:children m)
1592313605766:(if (nil? (m :children))\n           #_=>     [:p (:string m)] [])
1592313623871:(nil? (m :children))
1592313657485:(nil? (m :childrs))
1592313752337:(if (nil? (m :children)) [:p (:string m)] [:details [:summary (:string m)])
1592313754960:(if (nil? (m :children)) [:p (:string m)] [:details [:summary (:string m)]))
1592313762745:(if (nil? (m :children)) [:p (:string m)] [:details [:summary (:string m)]]))
1592313766439:(if (nil? (m :children)) [:p (:string m)] [:details [:summary (:string m)]])
1592313874437:(defn parsenode [m]\n  (if (nil? (m :children))\n    [:p (:string m)]\n    [:details [:summary (:string m)] (map parsenode (:children m))]\n  ))
1592313887267:(parsenode m)
1592314019410:(nil? (:child {:a 5}))
1592314320914:(+ 4 "rem")
1592314332929:(conj 4 "rem")
1592314365877:(+ (str 1) "rem")
1592314375947:((str 1) "rem")
1592314383643:(str 1) "rem"
1592314411826:(str 1 "rem")
1592314831110:(defn parse-n [m] #(parsenode m 0))
1592314861407:(defn sum [n] #(+ n 3))
1592314866110:(sum 3)
1592314869669:(sum 3) 4
1592314875702:(sum 3 3)
1592314891480:(defn sum [n] (+ n 3))
1592314895502:(sum 3)
1592315329742:(map sum 4 [1 2 3 4])
1592315385171:(map #(sum %2 %) [1 2 3 4])
1592315397209:(map #(sum %) [1 2 3 4])
1592315436109:(map (fn[](sum 1)) [1 2 3 4])
1592315449707:(map (+ 1) [1 2 3 4])
1592315454140:(map (+ 1 2) [1 2 3 4])
1592315495938:[1 2 3 4]
1592315504935:(map identity [1 2 3 4])
1592315513733:(map + [1 2 3 4])
1592315526423:(map (fn[] 5) [1 2 3 4])
1592315585182:(map #(fn[% %2] (+ % %2)) [1 2 3 4])
1592315589999:(map #(fn[% %2] (+ % %2)) [1 2 3 4] 3)
1592315592320:(map #(fn[% %2] (+ % %2)) [1 2 3 4] 3 6)
1592315604560:(map #(fn[% %2] (+ % %2)) 3 6  [1 2 3 4])
1592315648027:(#(+ % %2) 3 6)
1592315704461:(map (#(+ % %2) 3 6)  [1 2 3 4])
1592315730339:(map (#(+ % %2) 3)  [1 2 3 4])
1592315739387:(map (#(+ % %2) 3  [1 2 3 4]))
1592315858873:(map (#(+ % 3)  [1 2 3 4]))
1592315903191:(defn aa [x] 2*x)
1592315908123:(defn aa [x] [2*x])
1592315930529:(defn aa [x] (* 2 x))
1592315932782:aa 3
1592315943120:(aa 3)
1592315964019:(defn ab [x y] (* 2 [x y]))
1592315988828:(defn ab [x y] [(* 2 x) (* 2 y)]))
1592315999452:(defn ab [x y] [(* 2 x) (* 2 y)])
1592316002704:ab 2 3
1592316007410:(ab 2 3)
1592316022313:#(ab % 3)
1592316028970:(#(ab % 3) 2)
1592316032586:(#(ab % 3) 5)
1592316040099:(#(ab %2 %) 5)
1592316043291:(#(ab %2 %) 5 10)
1592316080958:(map (#(ab % %2) 3)  [1 2 3 4])
1592316192524:(map (partial ab 2) [1 3 5 7 9])
1592322140433:(defn split-by-whitespace [s]\n	(clojure.string/split s #"\\s+"))
1592322151710:split-by-whitespace
1592322167594:(split-by-whitespace "asdas as ww aa S")
1592411498420:(def example [{:s "you" :uid "123"\n              :c [\n                  {:s "#[[public]]" :uid "124" :c [{:s "NAMME"}] }\n                  {:s "HELLOO ((223))" :uid "125" }\n                  ]\n               },\n              {:s "second page" :uid "223" :c [{:s "child 2" :uid "245" :c [{:s "this is me"}]} ]},\n              {:s "third page" :uid "224" :c [{:s "child 3" :uid "345" :c [{:s "abc"}]} ]},\n              {:s "fourth page ((223))" :uid "225" :c [{:s "#[[public]]"} {:s "child 4 with ((245))" :uid "445" :c [{:s "yyyy"}]} ]}\n              ]\n\n  )
1592411761192:(->> example (tree-seq map? :c))
1592411801139:(->> example (tree-seq filter? :c))
1592411809143:(->> example (tree-seq map? :c))
1592411836796:(->> example (tree-seq map? :c) (filter :s))
1592411845181:(->> example (tree-seq map? :c) (map :s))
1592411855258:(->> example (tree-seq map? :c))
1592411866918:(->> example (tree-seq map? :c) (identity))
1592411881066:(->> example (tree-seq map? :c) (println))
1592411904226:(->> example (tree-seq map? :c) (#println(str 2 %)))
1592411917845:(->> example (tree-seq map? :c) (#(println(str 2 %))))
1592411941236:(->> example (tree-seq map? :c) (#(println(str "---aaa----" %))))
1592411956829:(->> example (tree-seq filter? :c) (#(println(str "---aaa----" %))))
1592412121380:(->> example (tree-seq map\n                       \n                    ? :c) (#(println(str "---aaa----" %))))
1592412173737:(->> example (tree-seq map? :c) (#(println(str 2 %))))
1592412185327:(keep :foo (tree-seq map? vals x))
1592412188479:(keep :foo (tree-seq map? vals example))
1592412194863:(keep :c (tree-seq map? vals example))
1592412199521:(keep :c (tree-seq map? example))
1592412206504:(keep :c (tree-seq map? map example))
1592412215384:(keep true (tree-seq map? example))
1592412237600:(tree-seq map? vals example)
1592412252186:(tree-seq map? vals example :0)
1592412265331:(tree-seq map? vals (example :0))
1592412270712:(example :0)
1592412281114:(first example)
1592412290489:(tree-seq map? vals (first example))
1592412353363:(keep :c (tree-seq map? (first example)))
1592412363115:(keep :c (tree-seq map? first example))
1592412378964:(keep :c (tree-seq map? vals (first example)))
1592412682250:(walk first reverse example)
1592412698537:(use 'clojure.walk)
1592412709046:(require '[clojure.walk :as w])
1592412711665:w
1592412714406:w/walk
1592412729317:(w/walk first reverse example)
1592412742722:(w/walk second reverse example)
1592412751955:(w/walk :uid reverse example)
1592412765998:(w/walk (= key :uid) reverse example)
1592412771645:(w/walk (= :key :uid) reverse example)
1592412782103:(w/walk reverse example)
1592413084200:(defn keep-node? [m] \n  (if (nil? (m :children ))\n    ()\n    (if (= "#[[public]]" (get-in m [:children 0])) m ) [] ))
1592413099585:(keep-node example)
1592413131456:[200~(defn keep-node? [m] \n          (if (nil? (m :children ))\n                ()\n                (if (= "#[[public]]" (get-in m [:children 0])) m ) [] )))
1592413168989:(defn keep-node? [m]\n  (if (nil? (m :c ))\n    ()\n    (if (= "#[[public]]" (get-in m [:c 0])) m [])  ))
1592413180019:(keep-node m)
1592413187186:(keep-node example)
1592413195083:(keep-node (first example))
1592413207827:(keep-node? (first example))
1592413243123:(defn keep-node [m]\n  (if (nil? (m :c ))\n    ()\n    (if (= "#[[public]]" (get-in m [:c 0 :s])) m [])  ))
1592413246094:(keep-node (first example))
1592426572081:(defn calculate* []\n   (->> (range 10)\n        (filter odd? ,,,)\n        (map #(* % %) ,,,)\n        (reduce + ,,,)))
1592426579452:(calculate)
1592426585760:(calculate 5)
1592426596613:(defn calculate []\n   (reduce + (map #(* % %) (filter odd? (range 10)))))
1592426600651:(calculate)
1592426614597:(defn calculate* []\n   (->> (range 10)\n        (filter odd? )\n        (map #(* % %) )\n        (reduce + )))
1592426618577:(calculate)
1592427259652:(defn keep-node [m]\n  (if (nil? (m :c ))\n    ()\n    (if (= "#[[public]]" (get-in m [:c 0 :s])) m [])  ))
1592427274454:(keep-node example)
1592427282837:(keep-node (first example))
1592427487087:(defn keep-node [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (= "#[[public]]" (get-in n [:c 0 :s])) n [])  ))\n  )
1592427497410:(keep-node example)
1592427513221:(defn keep-node [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (= "#[[public]]" (get-in n [:c 0 :s])) n )  ))\n  )
1592427516042:(keep-node example)
1592427767534:(def example [{:s "you" :uid "123"\n              :c [\n                  {:s "#[[public]]" :uid "124" :c [{:s "NAMME"}] }\n                  {:s "HELLOO ((223))" :uid "125" }\n                  ]\n               },\n              {:s "second page" :uid "223" :c [{:s "child 2" :uid "245" :c [{:s "this is me"}]} ]},\n              {:s "2anda half page" :uid "224" :c [{:s "child 2" :uid "222" :c [{:s "this is me"}]} ]},\n\n              {:s "third page" :uid "224" :c [{:s "child 3" :uid "345" :c [{:s "#[[public]]"}]} ]},\n              {:s "fourth page ((223))" :uid "225" :c [{:s "#[[public]]"} {:s "child 4 with ((245))" :uid "445" :c [{:s "yyyy"}]} ]}\n              ]\n\n  )
1592427771627:(defn keep-node [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (= "#[[public]]" (get-in n [:c 0 :s])) n keep-node (n :c))  ))\n  )
1592427779649:(keep-node example)
1592428330742:(find example :uid)
1592428342478:(find example (:uid 445))
1592428496001:(defn find-all-nested\n  [m k]\n  (->> (tree-seq map? vals m)\n       (filter map?)\n       (keep k)))
1592428505402:(find-nested m #(get % "125"))
1592428511356:(find-nested example #(get % "125"))
1592428523291:(find-nested (first example) #(get % "125"))
1592428701845:(->> {:a "bar" :b "foo" :c "bar" :d "baz"} ; initial map\n           (group-by val)   ; sorted into a new map based on value of each key\n           (#(get % "bar")) ; extract the entries that had value "bar"\n     )
1592428738770:(->> example ; initial map\n           (group-by val)   ; sorted into a new map based on value of each key\n           (#(get % "225")) ; extract the entries that had value "bar"\n     )
1592428748164:(->> (first example) ; initial map\n           (group-by val)   ; sorted into a new map based on value of each key\n           (#(get % "225")) ; extract the entries that had value "bar"\n     )
1592429092239:(select [:a ALL :b ALL #(= "225" (:uuid %))] example)
1592429305188:(get-in {:a 5} [:c 0 :s])
1592429620973:(if 5 3 2)
1592429623707:(if 5 3)
1592429629315:(if nil 3)
1592429632445:(if nil 3 2)
1592430178740:(example 1)
1592430181672:(example 4)
1592430186657:(example 5)
1592430192321:(example 30)
1592430194849:(example 3)
1592430198394:(example 4)
1592430227030:(defn find-nested [nodes id]\n  (for (n nodes)\n    (if (= (:uid n) id) n find-nested (:children n) id )\n  ))
1592430241740:(find-nested example "445")
1592430304075:(defn find-nested [nodes id]\n  (for (n nodes)\n    (if (= (:uid n) id) n find-nested (:children n) id )\n  ))
1592430392365:(defn find-nested [nodes id]\n  (for (n nodes)\n    (if (= (:uid n) id)\n      n\n      find-nested (:c n) id )\n  )\n  )
1592430396487:(find-nested example "445")
1592430438880:(defn find-nested [nodes id]\n  (for (n nodes)\n    (if (= (:uid n) id)\n      n\n      (if ((:c n) find-nested (:c n) id )\n  ))\n  )\n  )
1592430441801:(find-nested example "445")
1592430495047:(defn keep-node [nodes predicate]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (predicate n "#[[public]]")\n        n\n        keep-node (n :c)\n        )\n      )\n    )\n  )
1592430540514:keep-node
1592430560485:(keep-node example (= :uid "225"))
1592430596862:(keep-node example (= :uid "123123123"))
1592430765429:[200~( defn tag? [node tag]\n            (= tag (get-in node [:c 0 :s])) )\n  \n  \n  (defn keep-node [nodes predicate]\n      (for [n nodes]\n            (if (nil? (n :c ))\n                    ()\n                   (if (predicate n)\n                              n\n                              keep-node (n :c)\n                              )\n                    )\n            )\n      ))
1592430772274:( defn tag? [node tag]\n    (= tag (get-in node [:c 0 :s])) )
1592430776714:(defn keep-node [nodes predicate]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (predicate n)\n        n\n        keep-node (n :c)\n        )\n      )\n    )\n  )
1592430818741:(keep-node example #(tag? % "#[[public]]"))
1592430828821:(keep-node example #(tag? % "#[[pubc]]"))
1592430856615:(defn keep-node [nodes predicate]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (predicate n)\n        n\n        keep-node (n :c)\n        )\n      )\n    )\n  )
1592430871581:(defn keep-n [nodes predicate]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (predicate n)\n        n\n        keep-n (n :c)\n        )\n      )\n    )\n  )
1592430883515:(keep-n example #(tag? % "#[[pubc]]"))
1592430890370:(keep-n example #(tag? % "#[[public]]"))
1592430938701:(keep-n example (#(tag? % "#[[public]]")))
1592430951763:example
1592431177699::reload
1592431179184:(defn keep-node [nodes predicate]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (predicate n "#[[public]]")\n        n\n        keep-node (n :c)\n        )\n      )\n    )\n  )
1592431268628:example
1592431290373:tag?
1592431300616:(tag? {} "a")
1592431321017:(#(tag? % "a") {})
1592431342282:(#(tag? % "a") {:c {:s "a"}})
1592431363782:(#(tag? % "a") {:c [{:s "a"}]})
1592431384526:#(tag? % "a") {:c [{:s "a"}]}
1592431388704:#(tag? % "a")
1592431392315:#(tag? % "a") {}
1592431405450:(def aa #(tag? % "a") )
1592431410282:(aa {})
1592431428606:(keep-n example #(tag? % "#[[public]]"))
1592431441772:(keep-node example #(tag? % "#[[public]]"))
1592431521056:(keep-node example #(= (:uid %) "225") )
1592431545776:(defn keep-node [nodes predicate]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (predicate n)\n        n\n        keep-node (n :c)\n        )\n      )\n    )\n  )
1592431549079:(keep-node example #(= (:uid %) "225") )
1592431555625:(keep-node example #(tag? % "#[[public]]"))
1592431560434:(keep-node example #(= (:uid %) "225") )
1592431577218:(keep-node example #(= (:uid %) "2") )
1592431611150:(defn keeper [nodes predicate]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (predicate n)\n        n\n        keeper (n :c)\n        )\n      )\n    )\n  )
1592431620979:(keeper example #(= (:uid %) "2") )
1592431632658:(keeper example #(tag? % "#[[public]]"))
1592431669763:(defn keeper [nodes predicate]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (predicate n "#[[public]]")\n        n\n        keeper (n :c)\n        )\n      )\n    )\n  )
1592431687658:(keeper example tag?)
1592431734646:(defn keeper [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (=(get-in node [:c 0 :s]) "#[[public]]")\n        n\n        keeper (n :c)\n        )\n      )\n    )\n  )
1592431742092:(keeper examples)
1592431745044:(keeper example)
1592431838879:(defn keeper [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (=(get-in n [:c 0 :s]) "#[[public]]")\n        n\n        keeper (n :c)\n        )\n      )\n    )\n  )
1592431842174:(keeper example)
1592431866306:(defn keeper [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (=(get-in n [:c 0 :s]) "#[[public]]")\n        n\n        keeper (n :c)\n        )\n      )\n    )\n  )
1592431868079:example
1592432012025:(defn keeper [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (=(get-in n [:c 0 :s]) "#[[public]]")\n        n\n        ;(keeper (n :c))\n      )\n    )\n  )\n)
1592432021133:(keeper example)
1592432051289:(defn keeper [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (=(get-in n [:c 0 :s]) "#[[public]]")\n        n\n        (keeper (n :c))\n      )\n    )\n  )\n  )
1592432059159:(keeper example)
1592432106957:(defn keeper [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (=(get-in n [:c 0 :s]) "#[[public]]")\n        n\n        keeper (n :c )\n    )\n  ) ))
1592432111200:(keeper example)
1592432115542::r
1592432118456:(keeper example)
1592432137181:(defn eper [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      ()\n      (if (=(get-in n [:c 0 :s]) "#[[public]]")\n        n\n        eper (n :c )\n    )\n  ) ))
1592432140593:(eper example)
1592432165025:(defn keeper [nodes]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      nil\n      (if (=(get-in n [:c 0 :s]) "#[[public]]")\n        n\n        ( keeper (n :c ) )\n    )\n  ) ))
1592432167936:(eper example)
1592432171960:(keeper example)
1592432220659:(keeper :children example)
1592432225707:(keeper :c example)
1592432235188:(keeper (:c example))
1592432361077:(defn find-nested [nodes id]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      nil\n      (if (=(:uid n) uid)\n        n\n        (find-nested (n :c ) id)\n        )\n      ) ))
1592432370607:(defn find-nested [nodes id]\n  (for [n nodes]\n    (if (nil? (n :c ))\n      nil\n      (if (=(:uid n) id)\n        n\n        (find-nested (n :c ) id)\n        )\n      ) ))
1592432381144:(find-nested example "225")
1592432409945:(first (find-nested example "225"))
1592432423211:(find (find-nested example "225"))
1592432440443:(filter (nil (find-nested example "225")))
1592432490327:(filter (nil? (find-nested example "225")))
1592432504542:(filter nil?) (find-nested example "225")
1592432513262:((filter nil?) (find-nested example "225"))
1592433212855:(defn finder [coll id]\n  (for [n coll]\n\n  (if (= (:uid n) id)\n    nil\n    (finder (rest coll) id)) )\n)
1592433224228:(finder example "225")
1592477921312:take % [iterate [a b] [b (+ a b)] [1 1] ]
1592477929648:take % [iterate [[a b]] [b (+ a b)] [1 1] ]
1592477936579:(take 5 [iterate [[a b]] [b (+ a b)] [1 1] ])
1592477968705:(take 5 (iterate (fn [[a b]] [b (+ a b)] [1 1] ]))
1592477970444:(take 5 (iterate (fn [[a b]] [b (+ a b)] [1 1] ])))
1592478007430:(take 5 [ 1 1 1 11 11 1 1 111 1 1])
1592478141440:(take 5 (iterate (fn [[a b]] [b (+ a b)] [1 1] ])))
1592478145193:(first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))
1592478155516:((iterate (fn [[a b]] [b (+ a b)]) [1 1]))
1592478162310:(first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))
1592478170521:(map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))
1592478689041:#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1])))
1592478692110:#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) 5
1592478696667:(#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) 5)
1592478721191:(#(take % (map first (iterate (fn [[a b]] [(+ a b) b]) [1 1]))) 5)
1592478732153:(#(take % (map last (iterate (fn [[a b]] [(+ a b) b]) [1 1]))) 5)
1592478755608:(#(take % (map last (iterate (fn [[a b]] [(+ a b) b]) [1 1]))) 10)
1592478770262:(#(take % (map (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) 10)
1592478787431:(#(take % (map (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) 5)
1592478795129:(#(take % (map second (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) 5)
1592478803449:(#(take % (map last (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) 5)
1592478811218:(#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) 5)
1592478836884:(#(take % (map first (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) 8)
1592478858509:(#(take % (map [] (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) 8)
1592478873636:(#(take % (map identity (iterate (fn [[a b]] [b (+ a b)]) [1 1]))) 8)
1592478885699:(#(take % (map identity (iterate (fn [[a b]] [(+ a b) b]) [1 1]))) 8)
1592478967701:(take 4 ([1 1] [2 1] [3 1] [4 1] [5 1] [6 1] [7 1] [8 1]))
1592478976198:(take 3 ([1 1] [2 1] [3 1] [4 1] [5 1] [6 1] [7 1] [8 1]))
1592498563963:{a 5}
1592498571786:{"a" 5}
1592498575145:{"a" 5} :a
1592498585058:(:a {"a" 5})
1592499726226:(def roamdata [{:string\n                              "cells in most organisms have hundreds of different metabolic pathways, many interconnecting, forming networks of metabolic reactions. Albert-László Barabási and colleagues looked in detail at the structure of metabolic networks in forty-three different organisms and found that they all were “well fitted” by a power-law distribution—i.e., are scale free. ",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1590606999019,\n                :uid "_MGrRoKxi",\n                :edit-time 1590606999019,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "A biological [[neuron]] can actually compute a [[XOR]] [[function]]",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1586361516499,\n                :children\n                              [{:string "#logic #neuroscience",\n                                :create-email "strasser.ms@gmail.com",\n                                :create-time 1586361552017,\n                                :uid "oxjApppM9",\n                                :edit-time 1586361562194,\n                                :edit-email "strasser.ms@gmail.com"}],\n                :uid "aGSplMmjW",\n                :edit-time 1587048222268,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1590436308465,\n                :children\n                              [{:string "",\n                                :create-email "strasser.ms@gmail.com",\n                                :create-time 1592495703812,\n                                :uid "Lo6QV--M1",\n                                :edit-time 1592495703812,\n                                :edit-email "strasser.ms@gmail.com"}],\n                :uid "NN4FriIah",\n                :edit-time 1592495703817,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "The take-home message is that fractal structure is one way to generate a power-law distribution; and if you happen to see that some quantity (such as metabolic rate) follows a power-law distribution, then you can hypothesize that there is something about the underlying system that is self-similar or “fractal-like.”",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1590436308465,\n                :uid "s-7b4wHx_",\n                :edit-time 1590436308734,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "What Brown, Enquist, and West were doing in the glass-walled conference room all those many weeks and months was developing an intricate mathematical model of the circulatory system as a space-filling [[fractal]]. They adopted the energy-and-time-minimization and constant-terminal-unit-size assumptions given above, and asked, What happens in the model when body mass is scaled up?",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1590436308465,\n                :uid "oYRqP2Gdt",\n                :edit-time 1592343111900,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "Others have argued that metabolic scaling theory is oversimplified, that life is too complex and varied to be covered by one overreaching theory, and that positing [[fractal]] structure is by no means the only way to explain the observed power-law distributions. One ecologist put it this way: “The more detail that one knows about the particular physiology involved, the less plausible these explanations become.”",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1590436308465,\n                :uid "w2bxHamUp",\n                :edit-time 1592343107413,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "Fractal was a [[less wrong]] way to view scaling than euclidian [[geometry]]",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1591293897362,\n                :uid "W3miO3A3o",\n                :edit-time 1592495615827,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "Engines, machines do not use biological innovations, like fractal space filling --scale—> metabolism (RPM == ~heartbeat) scales with volume",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1582243748391,\n                :uid "A1pNAdAWZ",\n                :edit-time 1582250887538,\n                :edit-email "strasser.ms@gmail.com"}\n               {:title\n                            "The Circulatory System as a Space-Filling Fractal",\n                :children\n                            [{:string "#public",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592342794255,\n                              :uid "9wpzSNTEw",\n                              :edit-time 1592342797376,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((oYRqP2Gdt))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1590954816783,\n                              :uid "dvVvyp-OL",\n                              :edit-time 1592342830336,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((W3miO3A3o))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1590954816783,\n                              :uid "WoWa6e8Yn",\n                              :edit-time 1592342889357,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((w2bxHamUp))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592342889353,\n                              :uid "0VMKtjkYI",\n                              :edit-time 1592342923451,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((A1pNAdAWZ))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592342923448,\n                              :uid "Ct_BoGHmK",\n                              :edit-time 1592343001337,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((s-7b4wHx_))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592343001332,\n                              :uid "0jJfPK_1G",\n                              :edit-time 1592343051555,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((NN4FriIah))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592343051549,\n                              :uid "Hmw-MvXz6",\n                              :edit-time 1592484706157,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string\n                                            "((aGSplMmjW)). We thought this required larger system to perform.",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1591044878601,\n                              :uid "7vTGzEIvN",\n                              :edit-time 1592495684302,\n                              :edit-email "strasser.ms@gmail.com"}],\n                :edit-time 1592484813794,\n                :edit-email "strasser.ms@gmail.com"}\n               {:title\n                            "Complexity Emerges From The Complex, Not The Simple",\n                :children\n                            [{:string\n                                            "#public #space-filling #complexity #emergent",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1591041432063,\n                              :uid "ceNITOiNJ",\n                              :edit-time 1592485127161,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string\n                                            "When we use better tools to go deeper we find that lower levels of organization are a lot more complex than we’ve been giving them credit for",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1591045321671,\n                              :children\n                                            [{:string\n                                                            "A prokaryote can perform, within a prokaryote precarious, complicated metabolic functions",\n                                              :create-email "strasser.ms@gmail.com",\n                                              :create-time 1590954816783,\n                                              :uid "9fGIfCa-x",\n                                              :edit-time 1591045800491,\n                                              :edit-email "strasser.ms@gmail.com"}\n                                             {:string\n                                                            "A [[cell]] is incredibly complex. Everything’s optimally packed. Nature is [[space-filling]]",\n                                              :create-email "strasser.ms@gmail.com",\n                                              :create-time 1592342693832,\n                                              :children\n                                                            [{:string\n                                                                            "https://twitter.com/mkstra/status/1267582585829457922",\n                                                              :create-email "strasser.ms@gmail.com",\n                                                              :create-time 1591100417321,\n                                                              :children\n                                                                            [{:string\n                                                                                           "This superficially contradicts Gall's Law: \\"only simple systems scale\\" but the universe compiles differently and has no working memory constraints",\n                                                                              :create-email\n                                                                                           "strasser.ms@gmail.com",\n                                                                              :create-time 1591048756741,\n                                                                              :children\n                                                                                           [{:string\n                                                                                                          "The tool defines \\"simple\\".\\nThe medium scopes description length.",\n                                                                                             :create-email\n                                                                                                          "strasser.ms@gmail.com",\n                                                                                             :create-time 1591100493019,\n                                                                                             :uid "zRX_z9J2q",\n                                                                                             :edit-time 1591100502119,\n                                                                                             :edit-email\n                                                                                                          "strasser.ms@gmail.com"}],\n                                                                              :uid "jVhiK_egw",\n                                                                              :edit-time 1591100493025,\n                                                                              :edit-email\n                                                                                           "strasser.ms@gmail.com"}],\n                                                              :uid "h60blxi0C",\n                                                              :edit-time 1591100430439,\n                                                              :edit-email "strasser.ms@gmail.com"}],\n                                              :uid "nCD4gygdT",\n                                              :edit-time 1592342693832,\n                                              :edit-email "strasser.ms@gmail.com"}],\n                              :uid "Vv6FmKqTw",\n                              :edit-time 1591045345715,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592485007902,\n                              :uid "omvorm3sj",\n                              :edit-time 1592485007902,\n                              :edit-email "strasser.ms@gmail.com"}],\n                :edit-time 1592485004398,\n                :edit-email "strasser.ms@gmail.com"}\n               {:title\n                            "Why Haven't We Found More Laws of Biology?",\n                :children\n                            [{:string\n                                            "#public #biology #quantify #biophysics",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592485456045,\n                              :uid "Np8fZiVS3",\n                              :edit-time 1592485493323,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string\n                                            "[[claim]] 1: physical systems look simpler in [[hindsight]]",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1591046994051,\n                              :children\n                                            [{:string\n                                                            "physical systems by virtue of having had many more hundreds of years to study them, good science, look, to us, now a lot simpler than perhaps they did when these things were first being worked out, right?",\n                                              :create-email "strasser.ms@gmail.com",\n                                              :create-time 1590954816783,\n                                              :children\n                                                            [{:string\n                                                                            "#claim [[confidence]]: {{[[slider]]}}",\n                                                              :props\n                                                                            {:slider {:yolo 3}},\n                                                              :create-email "strasser.ms@gmail.com",\n                                                              :create-time 1591047032940,\n                                                              :uid "mGbjSuRsw",\n                                                              :edit-time 1591047047235,\n                                                              :edit-email "strasser.ms@gmail.com"}],\n                                              :uid "dgOdlrARD",\n                                              :edit-time 1591047002222,\n                                              :edit-email "strasser.ms@gmail.com"}\n                                             {:string "",\n                                              :create-email "strasser.ms@gmail.com",\n                                              :create-time 1591047011067,\n                                              :uid "7Ay4CMlGS",\n                                              :edit-time 1591047011067,\n                                              :edit-email "strasser.ms@gmail.com"}],\n                              :uid "-GXaf0Iy3",\n                              :edit-time 1592485500890,\n                              :edit-email "strasser.ms@gmail.com"}],\n                :edit-time 1592485434828,\n                :edit-email "strasser.ms@gmail.com"\n                }])
1592499757656:(filter :title roamdata)
1592500113484:(filter :title (get-in roamdata [:json 0]) )
1592500117628:(filter :title (get-in roamdata [0]) )
1592500136017:(filter :title (get-in roamdata [:0] ))
1592500155985:(filter :title (get-in roamdata [:title] ))
1592500164690:(filter :title (get-in seq roamdata [:title] ))
1592500173897:(seq roamdata)
1592500182264:roamdata
1592500195246:(def roamdata [{:string\n                              "cells in most organisms have hundreds of different metabolic pathways, many interconnecting, forming networks of metabolic reactions. Albert-László Barabási and colleagues looked in detail at the structure of metabolic networks in forty-three different organisms and found that they all were “well fitted” by a power-law distribution—i.e., are scale free. ",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1590606999019,\n                :uid "_MGrRoKxi",\n                :edit-time 1590606999019,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "A biological [[neuron]] can actually compute a [[XOR]] [[function]]",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1586361516499,\n                :children\n                              [{:string "#logic #neuroscience",\n                                :create-email "strasser.ms@gmail.com",\n                                :create-time 1586361552017,\n                                :uid "oxjApppM9",\n                                :edit-time 1586361562194,\n                                :edit-email "strasser.ms@gmail.com"}],\n                :uid "aGSplMmjW",\n                :edit-time 1587048222268,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1590436308465,\n                :children\n                              [{:string "",\n                                :create-email "strasser.ms@gmail.com",\n                                :create-time 1592495703812,\n                                :uid "Lo6QV--M1",\n                                :edit-time 1592495703812,\n                                :edit-email "strasser.ms@gmail.com"}],\n                :uid "NN4FriIah",\n                :edit-time 1592495703817,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "The take-home message is that fractal structure is one way to generate a power-law distribution; and if you happen to see that some quantity (such as metabolic rate) follows a power-law distribution, then you can hypothesize that there is something about the underlying system that is self-similar or “fractal-like.”",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1590436308465,\n                :uid "s-7b4wHx_",\n                :edit-time 1590436308734,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "What Brown, Enquist, and West were doing in the glass-walled conference room all those many weeks and months was developing an intricate mathematical model of the circulatory system as a space-filling [[fractal]]. They adopted the energy-and-time-minimization and constant-terminal-unit-size assumptions given above, and asked, What happens in the model when body mass is scaled up?",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1590436308465,\n                :uid "oYRqP2Gdt",\n                :edit-time 1592343111900,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "Others have argued that metabolic scaling theory is oversimplified, that life is too complex and varied to be covered by one overreaching theory, and that positing [[fractal]] structure is by no means the only way to explain the observed power-law distributions. One ecologist put it this way: “The more detail that one knows about the particular physiology involved, the less plausible these explanations become.”",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1590436308465,\n                :uid "w2bxHamUp",\n                :edit-time 1592343107413,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "Fractal was a [[less wrong]] way to view scaling than euclidian [[geometry]]",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1591293897362,\n                :uid "W3miO3A3o",\n                :edit-time 1592495615827,\n                :edit-email "strasser.ms@gmail.com"}\n               {:string\n                              "Engines, machines do not use biological innovations, like fractal space filling --scale—> metabolism (RPM == ~heartbeat) scales with volume",\n                :create-email "strasser.ms@gmail.com",\n                :create-time 1582243748391,\n                :uid "A1pNAdAWZ",\n                :edit-time 1582250887538,\n                :edit-email "strasser.ms@gmail.com"}\n               {:title\n                            "The Circulatory System as a Space-Filling Fractal",\n                :children\n                            [{:string "#public",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592342794255,\n                              :uid "9wpzSNTEw",\n                              :edit-time 1592342797376,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((oYRqP2Gdt))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1590954816783,\n                              :uid "dvVvyp-OL",\n                              :edit-time 1592342830336,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((W3miO3A3o))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1590954816783,\n                              :uid "WoWa6e8Yn",\n                              :edit-time 1592342889357,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((w2bxHamUp))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592342889353,\n                              :uid "0VMKtjkYI",\n                              :edit-time 1592342923451,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((A1pNAdAWZ))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592342923448,\n                              :uid "Ct_BoGHmK",\n                              :edit-time 1592343001337,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((s-7b4wHx_))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592343001332,\n                              :uid "0jJfPK_1G",\n                              :edit-time 1592343051555,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "((NN4FriIah))",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592343051549,\n                              :uid "Hmw-MvXz6",\n                              :edit-time 1592484706157,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string\n                                            "((aGSplMmjW)). We thought this required larger system to perform.",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1591044878601,\n                              :uid "7vTGzEIvN",\n                              :edit-time 1592495684302,\n                              :edit-email "strasser.ms@gmail.com"}],\n                :edit-time 1592484813794,\n                :edit-email "strasser.ms@gmail.com"}\n               {:title\n                            "Complexity Emerges From The Complex, Not The Simple",\n                :children\n                            [{:string\n                                            "#public #space-filling #complexity #emergent",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1591041432063,\n                              :uid "ceNITOiNJ",\n                              :edit-time 1592485127161,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string\n                                            "When we use better tools to go deeper we find that lower levels of organization are a lot more complex than we’ve been giving them credit for",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1591045321671,\n                              :children\n                                            [{:string\n                                                            "A prokaryote can perform, within a prokaryote precarious, complicated metabolic functions",\n                                              :create-email "strasser.ms@gmail.com",\n                                              :create-time 1590954816783,\n                                              :uid "9fGIfCa-x",\n                                              :edit-time 1591045800491,\n                                              :edit-email "strasser.ms@gmail.com"}\n                                             {:string\n                                                            "A [[cell]] is incredibly complex. Everything’s optimally packed. Nature is [[space-filling]]",\n                                              :create-email "strasser.ms@gmail.com",\n                                              :create-time 1592342693832,\n                                              :children\n                                                            [{:string\n                                                                            "https://twitter.com/mkstra/status/1267582585829457922",\n                                                              :create-email "strasser.ms@gmail.com",\n                                                              :create-time 1591100417321,\n                                                              :children\n                                                                            [{:string\n                                                                                           "This superficially contradicts Gall's Law: \\"only simple systems scale\\" but the universe compiles differently and has no working memory constraints",\n                                                                              :create-email\n                                                                                           "strasser.ms@gmail.com",\n                                                                              :create-time 1591048756741,\n                                                                              :children\n                                                                                           [{:string\n                                                                                                          "The tool defines \\"simple\\".\\nThe medium scopes description length.",\n                                                                                             :create-email\n                                                                                                          "strasser.ms@gmail.com",\n                                                                                             :create-time 1591100493019,\n                                                                                             :uid "zRX_z9J2q",\n                                                                                             :edit-time 1591100502119,\n                                                                                             :edit-email\n                                                                                                          "strasser.ms@gmail.com"}],\n                                                                              :uid "jVhiK_egw",\n                                                                              :edit-time 1591100493025,\n                                                                              :edit-email\n                                                                                           "strasser.ms@gmail.com"}],\n                                                              :uid "h60blxi0C",\n                                                              :edit-time 1591100430439,\n                                                              :edit-email "strasser.ms@gmail.com"}],\n                                              :uid "nCD4gygdT",\n                                              :edit-time 1592342693832,\n                                              :edit-email "strasser.ms@gmail.com"}],\n                              :uid "Vv6FmKqTw",\n                              :edit-time 1591045345715,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string "",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592485007902,\n                              :uid "omvorm3sj",\n                              :edit-time 1592485007902,\n                              :edit-email "strasser.ms@gmail.com"}],\n                :edit-time 1592485004398,\n                :edit-email "strasser.ms@gmail.com"}\n               {:title\n                            "Why Haven't We Found More Laws of Biology?",\n                :children\n                            [{:string\n                                            "#public #biology #quantify #biophysics",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1592485456045,\n                              :uid "Np8fZiVS3",\n                              :edit-time 1592485493323,\n                              :edit-email "strasser.ms@gmail.com"}\n                             {:string\n                                            "[[claim]] 1: physical systems look simpler in [[hindsight]]",\n                              :create-email "strasser.ms@gmail.com",\n                              :create-time 1591046994051,\n                              :children\n                                            [{:string\n                                                            "physical systems by virtue of having had many more hundreds of years to study them, good science, look, to us, now a lot simpler than perhaps they did when these things were first being worked out, right?",\n                                              :create-email "strasser.ms@gmail.com",\n                                              :create-time 1590954816783,\n                                              :children\n                                                            [{:string\n                                                                            "#claim [[confidence]]: {{[[slider]]}}",\n                                                              :props\n                                                                            {:slider {:yolo 3}},\n                                                              :create-email "strasser.ms@gmail.com",\n                                                              :create-time 1591047032940,\n                                                              :uid "mGbjSuRsw",\n                                                              :edit-time 1591047047235,\n                                                              :edit-email "strasser.ms@gmail.com"}],\n                                              :uid "dgOdlrARD",\n                                              :edit-time 1591047002222,\n                                              :edit-email "strasser.ms@gmail.com"}\n                                             {:string "",\n                                              :create-email "strasser.ms@gmail.com",\n                                              :create-time 1591047011067,\n                                              :uid "7Ay4CMlGS",\n                                              :edit-time 1591047011067,\n                                              :edit-email "strasser.ms@gmail.com"}],\n                              :uid "-GXaf0Iy3",\n                              :edit-time 1592485500890,\n                              :edit-email "strasser.ms@gmail.com"}],\n                :edit-time 1592485434828,\n                :edit-email "strasser.ms@gmail.com"\n                }])
1592500211225:roamdata
1592500263333:(def pages (filter :title roamdata))
1592500264852:pages
1592500292237:(get-in pages [0])
1592500301085:(pages 0)
1592500315268:pages
1592500505210:(seq pages)
1592500516917:(seq pages 0)
1592500531368:(get-in (seq-pages) [0 :title])
1592500537141:(get-in (seq pages) [0 :title])
1592500613256:(seqable? pages)
1592500686580:(first pages)
1592500750766:(nth pages 3)
1592500755780:(nth pages 2)
1592500892768:(ns sitegen-reagent.app)
1592500894566:app-state
1592500915568:(filter :title (get-in @app-state [:json]))
1592500927624:(first (filter :title (get-in @app-state [:json])))
1592501912257:(second (filter :title (get-in @app-state [:json])))
1592501967125:parsenode
1592501981854:(def ss second (filter :title (get-in @app-state [:json]))))
1592501991151:(def ss (second (filter :title (get-in @app-state [:json])))))
1592501992626:ss
1592502023291:(parsenode 0 ss)
1592502092439:(def pages(filter :title (get-in @app-state [:json])))
1592502093749:pages
1592502107054:(map (partial parsenode 0 ) pages)
1592933962174:(def txt  "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))")
1592933964653:txt
1592933993054:(split-at "((" txt)
1592934219137:(str/split txt #"/\\(([^()]*)\\)/g")
1592934228979:(split txt #"/\\(([^()]*)\\)/g")
1592934248648:(string/split txt #"/\\(([^()]*)\\)/g")
1592934251986:(require '[clojure.string :as str])
1592934259178:(str/split txt #"/\\(([^()]*)\\)/g")
1592934271564:(str/split txt #/\\(([^()]*)\\)/g)
1592934374241:(str/split txt #"")
1592934377422:(str/split " something and ACamelName " #"(?=[A-Z])")
1592934396967:(str/split txt #"((")
1592934410704:(str/split txt #"))")
1592934413710:(str/split txt #")")
1592934417402:(str/split txt #"]]")
1592934434054:(str/split txt #"'))'")
1592934553146:roamdata
1592934567530:(ns sitegen-reagent.util)
1592934569065:roamdata
1592934576475:(map :uid roamdata)
1592934763402:(map #(str % "aa") txt)
1592934775599:(def txt  "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))")
1592934778483:(map #(str % "aa") txt)
1592934796201:(split txt #" ")
1592934801177:(str/split txt #" ")
1592934805570:(string/split txt #" ")
1592934815138:(clojure.string/split txt #" ")
1592934877564:(def words clojure.string/split txt #" ")
1592934908341:(def words (clojure.string/split txt #" "))
1592934910907:words
1592934927015:(def words (clojure.string/split txt #" "))
1592934942541:[:p]
1592935270022:(filter #(= (:uid %) "_MGrRoKxi" roamdata))
1592935292711:(filter #(= (:uid %) "_MGrRoKxi") roamdata)
1592935326047:(def words (clojure.string/split txt #" "))
1592935375100:(defn get-ref [word] (filter #(= (:uid %) word) roamdata))
1592935528560:((drop 2 (drop-last 2 a) "((_MGrRoKxi))"))
1592935543247:((drop 2 (drop-last  "((_MGrRoKxi))")))
1592935548359:(drop 2 (drop-last  "((_MGrRoKxi))"))
1592935559256:(drop 2 (drop-last 2 "((_MGrRoKxi))"))
1592935564093:(join drop 2 (drop-last 2 "((_MGrRoKxi))"))
1592935569551:(str/join drop 2 (drop-last 2 "((_MGrRoKxi))"))
1592935577361:(str/join (drop 2 (drop-last 2 "((_MGrRoKxi))")))
1592935606023:(subs "((_MGrRoKxi))" 2 2)
1592935614991:(subs "Clojure" 1)
1592935622977:(subs "((_MGrRoKxi))" 2)
1592935627223:(subs "((_MGrRoKxi))" 2 1)
1592935680769:(count "((_MGrRoKxi))")
1592935712034:(subs "((_MGrRoKxi))" 2 (count (- "((_MGrRoKxi))" 2)))
1592935729181:(subs "((_MGrRoKxi))" 2 ( - (count "((_MGrRoKxi))") 2))
1592935818920:(defn get-ref [word] (filter #(= (:uid %) word) roamdata))
1592935848845:(get-ref (subs "((_MGrRoKxi))" 2 ( - (count "((_MGrRoKxi))") 2)))
1592936427667:(first get-ref (subs "((_MGrRoKxi))" 2 ( - (count "((_MGrRoKxi))") 2)))
1592936437059:(first (get-ref (subs "((_MGrRoKxi))" 2 ( - (count "((_MGrRoKxi))") 2))))
1592936738498:(defn get-str [w] (:string (first (get-ref (clip w)) ) ))
1592936767822:(get-str "((_MGrRoKxi))")
1592936793787:(first (get-ref (clip "((_MGrRoKxi))")))
1592936818806:(defn clip [s]\n  (subs s 2 ( - (count s) 2))\n  )
1592936821033:(first (get-ref (clip "((_MGrRoKxi))")))
1592936826885:(first (get-ref (clip "((_MGrRoK))")))
1592936839949:(:string (first (get-ref (clip "((_MGrRoK))"))))
1592936884988:(:string (first (get-ref (clip "((_MGrRoKxi))"))))
1592936895589:(defn clip [s]\n  (subs s 2 ( - (count s) 2))\n  )
1592936910540:(get-str "((_MGrRoKxi))")
1592936915597:(get-str "((_MGrRoKx))")
1592936920125:(get-str "((_MGrRoKxi))")
1592936964060:(or (get-str "((_MGrRoKxi))") "((_MGrRoKxi))")
1592937294411:(map #(or (get-str %) %) roamdata)
1592937343877:(map #(or (get-str %) %) "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))")
1592937399189:(map #(or (get-str %) %) (clojure.string/split "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))" #" "))
1592938069455:(clojure.edn/read-string  [:p (str ( :string m) "[:p Trottle]" )])
1592938088702:(clojure.edn/read-string  "[:p Trottle]")
1592938109762:(use (clojure.edn/read-string))
1592938116951:(use clojure.edn/read-string)
1592938163574:(cljs.reader)
1592938170668:(use cljs.reader)
1592938268712:(read-string)
1592938278107:clojure.edn/read
1592938344019:(clojure.edn/read)
1592938348357:read
1593012682020:(defn get-str [w] (:string (first (get-ref (clip w)) ) ))
1593012924623:(ns sitegen-reagent.util)
1593012958500:replace-ref
1593012985700:(replace-ref                               "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))")
1593013200918:words
1593013209001:(words                               "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))")
1593013252888:(def txt                               "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))")
1593013255737:(type txt)
1593013273503:(get-str (words txt))
1593013395299:(get-ref "corresponding")
1593013423128:(words txt)
1593013457666:((words txt) :0)
1593013622350:(get-str "[[fractal]]s.")
1593013645190:(replace-ref "[[fractal]]s.")
1593013653958:(defn replace-ref [txt]\n  (map #(or (get-str %) %) (words (txt) ) ) )
1593013656156:(replace-ref "[[fractal]]s.")
1593013693004::r
1593013694805:(replace-ref "[[fractal]]s.")
1593013700013:(ns sitegen-reagent.util)
1593013701429:(replace-ref "[[fractal]]s.")
1593013709431:(defn replace-ref [txt]\n  (map #(or (get-str %) %) (words txt ) ) )
1593013711413:(replace-ref "[[fractal]]s.")
1593013720815:(defn get-str [w] (:string (first (get-ref (clip w)) ) ))
1593013752517:(replace-ref txt)
1593013770932:txt
1593013777896:(def txt txt)
1593013779252:txt
1593013783933:(replace-ref txt)
1593013826005:(get-str "((_MGrRoKxi))")
1593013881877::r
1593013883118:(get-str "((_MGrRoKxi))")
1593013886253:roamdata
1593013890932::reload
1593013893213:reload
1593013907703:(use sitegen-reagent.util)
1593013924061:(ns sitegen-reagent.util)
1593013929884:roamdata
1593013987069:(ns sitegen-reagent.util)
1593013988380:roamdata
1593013990900:get-ref
1593019678187:(count "sssss")
1593019694203:(count ["sssss assd"])
1593019710683:(def wor "sss www aaa")
1593019712854:(count wor)
1593019717500:(count [wor])
1593021038569:(ns sitegen-reagent.util)
1593021056932:(to-hiccup "sss www aaa")
1593021086694:(defn special-hic [txt]\n  (if ( (count (words txt)) > 1 ) [:p {:class "block-ref"} txt ] txt)\n  )
1593021098039:(special-hic "aa ww ss")
1593021111679:(count "asas asas asa")
1593021123087:(words "aa aa ")
1593021131559:(count (words "aa aa "))
1593021215707:(if ( (count (words "ww ww aa")) > 1 ) 2 1)
1593021237564:(if ( (> (count (words "ww ww aa")) 1 )) 2 1)
1593021302749:(> (count (words "ww ww aa")) 1 )
1593021325621:(if (> (count (words "ww ww aa")) 1 ) 2 1)
1593021343072:(defn special-hic [txt]\n  (if (> (count (words "ww ww aa")) 1 ) [:p {:class "block-ref"} txt ] txt)\n  )
1593021351717:(special-hic "aaa sss ff")
1593021389072:(defn to-hiccup [words]\n  [:p (reduce special-hic\n              words)] )
1593021394782:(defn replace-ref [txt]\n  (map #(or (get-str %) %) (words txt ) ) )
1593021429824:(replace-ref "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))")
1593021500403:(def somewords (replace-ref "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))"))
1593021502498:somewords
1593021514026:(to-hiccup somewords)
1593021600739:somewords
1593021613869:(reduce str somewords)
1593021638974:(reduce special-hic somwords)
1593021642453:(reduce special-hic somewords)
1593021660310:somewords
1593021664150:(reduce special-hic somewords)
1593021961143:(str special-hic "aaa")
1593022172120:(conj "a" "b")
1593022209414:(map special-hic somewords)
1593022224308:(join (map special-hic somewords))
1593022286614:(clojure.string/join (map " " somewords))
1593022318573:(clojure.string/join " " (map special-hic somewords))
1593022576963:(defn indices [pred coll]\n   (keep-indexed #(when (pred %2) %1) coll))
1593022649890:(defn is-sentence txt\n  (> (count (words txt)) 1 )\n  )
1593022674690:(defn is-sentence [txt]\n  (> (count (words txt)) 1 )\n  )
1593022683367:(indices is-sentence somewords)
1593022686783:somewords
1593023638114:(partition-by is-sentence somewords)
1593023644192:is-sentence
1593023646849:somewords
1593023666611:(def somewords (replace-ref "This illustrates the intimate relationship between power laws and [[fractal]]s. Power law distributions, as we saw in chapter 15, figure 15.6, are [[fractal]]s—they are self-similar at all scales of magnification, and a power-law’s exponent gives the dimension of the corresponding [[fractal]] ((_MGrRoKxi))"))
1593023676923:(words somewords)
1593023698242:somewords
1593023718995:(partition-by is-sentence somewords)
1593023773597:(def parti partition-by is-sentence somewords)
1593023782534:(def parti (partition-by is-sentence somewords))
1593023783635:parti
1593023796430:(count (first parti))
1593023939216:(count (second parti))
1593024149698:clojure.edn/read-string
1593024161744:cljs.reader
1593024175506:(cljs.reader "[:b \\"hello world\\"]")
1593024183186:(cljs.reader/read-string "[:b \\"hello world\\"]")
1593024292961:(join (map special-hic somewords))
1593024305687:(join " " (map special-hic somewords))
1593024314109:somewords
1593024327949:(map special-hic somewords)
1593024343398:(string/join " "(map special-hic somewords))
1593024369451:(clojure.string/join " "(map special-hic somewords))
1593024410921:(cljs.read/read-string (clojure.string/join " "(map special-hic somewords)))
1593024424001:(cljs.reader/read-string (clojure.string/join " "(map special-hic somewords)))
1593024485834:(clojure.string/join " "(map special-hic somewords))
1593024498206:(cljs.reader/read-string (clojure.string/join " "(map special-hic somewords)))
1593024515090:(cljs.reader/read-string "asdsad asdasd asd asd asd asd asd")
1593024528234:(cljs.reader/read-string "(+ 1 2)")
